# -*- coding: utf-8 -*-
"""Problem 2 -- Even Fibonacci numbers

Each new term in the Fibonacci sequence is generated by adding the previous two
terms. By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.

Source: https://projecteuler.net/problem=2
"""


def solution_naive(n: int) -> int:
    a = b = 1
    sum_even = 0

    while b < n:
        if b % 2 == 0:
            sum_even += b

        sum_all = a + b
        a, b = b, sum_all

    return sum_even


def solution_optimized(n: int) -> int:
    a = b = 1
    sum_even = 0

    # Every third Fibonacci number is even:
    #
    #   1 1 2 3 5 8 13 21 34 55 89 144
    #       ^     ^       ^^       ^^^
    #   a b c a b c ...
    #
    # That gives, starting from the 4th term:
    #
    #   c = a + b => a = b + c = a + 2b
    #             => b = c + a = 2a + 3b
    while sum_even < n:
        sum_even += a + b
        a, b = a + 2*b, 2*a + 3*b

    return sum_even


if __name__ == "__main__":
    n = int(4e6)
    solution = 4613732

    assert(solution_naive(n) == solution)
    assert(solution_optimized(n) == solution)
